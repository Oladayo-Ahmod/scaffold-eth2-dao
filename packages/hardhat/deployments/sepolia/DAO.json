{
  "address": "0x0724969324073CC289bd0C8127fC568A2828775e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProposalAction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upVote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "downVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "chosen",
          "type": "bool"
        }
      ],
      "name": "VoteAction",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upVote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "downVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "propoper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            }
          ],
          "internalType": "struct DAO.Proposals",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upVote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "downVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "propoper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            }
          ],
          "internalType": "struct DAO.Proposals[]",
          "name": "props",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContributorsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "getProposalVote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "chosen",
              "type": "bool"
            }
          ],
          "internalType": "struct DAO.Voted[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "getProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upVote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "downVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "propoper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            }
          ],
          "internalType": "struct DAO.Proposals",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeholdersBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeholdersVotes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isContributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "payBeneficiary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "chosen",
          "type": "bool"
        }
      ],
      "name": "performVote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "chosen",
              "type": "bool"
            }
          ],
          "internalType": "struct DAO.Voted",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeholderStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0fdc3b96a47d3f31f3895ca6d711ea6bcdd2a103085d1524fdfd435e6e3e9206",
  "receipt": {
    "to": null,
    "from": "0x17C103b11b0d329E9f944a455FfA36f3bd9EfB50",
    "contractAddress": "0x0724969324073CC289bd0C8127fC568A2828775e",
    "transactionIndex": 37,
    "gasUsed": "2083244",
    "logsBloom": "0x
    "blockHash": "0x608184f6de96c0e9aa27e151863c54ab34fdda268becd51ce554261f2808b46e",
    "transactionHash": "0x0fdc3b96a47d3f31f3895ca6d711ea6bcdd2a103085d1524fdfd435e6e3e9206",
    "logs": [],
    "blockNumber": 6250372,
    "cumulativeGasUsed": "10174022",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "10f2e43e166b9815403995e62de68797",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProposalAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"name\":\"VoteAction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"propoper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct DAO.Proposals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"propoper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct DAO.Proposals[]\",\"name\":\"props\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContributorsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"getProposalVote\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"internalType\":\"struct DAO.Voted[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"getProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"propoper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct DAO.Proposals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeholdersBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeholdersVotes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isContributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"payBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"name\":\"performVote\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"internalType\":\"struct DAO.Voted\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeholderStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier : UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract DAO is AccessControl,ReentrancyGuard {\\r\\n\\r\\n    uint256 totalProposals;\\r\\n    uint256 balance;\\r\\n    address deployer;\\r\\n\\r\\n    uint256 immutable STAKEHOLDER_MIN_CONTRIBUTION = 0.005 ether;\\r\\n    uint256 immutable MIN_VOTE_PERIOD = 5 minutes;\\r\\n    bytes32 private immutable COLLABORATOR_ROLE = keccak256(\\\"collaborator\\\");\\r\\n    bytes32 private immutable STAKEHOLDER_ROLE = keccak256(\\\"stakeholder\\\");\\r\\n\\r\\n    mapping(uint256 => Proposals) private raisedProposals;\\r\\n    mapping(address => uint256[]) private stakeholderVotes;\\r\\n    mapping(uint256 => Voted[]) private votedOn;\\r\\n    mapping(address => uint256) private contributors;\\r\\n    mapping(address => uint256) private stakeholders;\\r\\n\\r\\n      struct Proposals {\\r\\n        uint256 id;\\r\\n        uint256 amount;\\r\\n        uint256 upVote;\\r\\n        uint256 downVotes;\\r\\n        uint256 duration;\\r\\n        string title;\\r\\n        string description;\\r\\n        bool paid;\\r\\n        bool passed;\\r\\n        address payable beneficiary;\\r\\n        address propoper;\\r\\n        address executor;\\r\\n    }\\r\\n\\r\\n     struct Voted {\\r\\n        address voter;\\r\\n        uint256 timestamp;\\r\\n        bool chosen;\\r\\n    }\\r\\n\\r\\n     modifier stakeholderOnly(string memory message) {\\r\\n        require(hasRole(STAKEHOLDER_ROLE,msg.sender),message);\\r\\n        _;\\r\\n    }\\r\\n    modifier contributorOnly(string memory message){\\r\\n        require(hasRole(COLLABORATOR_ROLE,msg.sender),message);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDeployer(string memory message) {\\r\\n        require(msg.sender == deployer,message);\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     event ProposalAction(\\r\\n        address indexed creator,\\r\\n        bytes32 role,\\r\\n        string message,\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n     event VoteAction(\\r\\n        address indexed creator,\\r\\n        bytes32 role,\\r\\n        string message,\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount,\\r\\n        uint256 upVote,\\r\\n        uint256 downVotes,\\r\\n        bool chosen\\r\\n    );\\r\\n\\r\\n     constructor(){\\r\\n        deployer = msg.sender;\\r\\n    }\\r\\n\\r\\n       // proposal creation\\r\\n    function createProposal (\\r\\n        string calldata title,\\r\\n        string calldata description,\\r\\n        address beneficiary,\\r\\n        uint256 amount\\r\\n    )external stakeholderOnly(\\\"Only stakeholders are allowed to create Proposals\\\") returns(Proposals memory){\\r\\n        uint256 currentID = totalProposals++;\\r\\n        Proposals storage StakeholderProposal = raisedProposals[currentID];\\r\\n        StakeholderProposal.id = currentID;\\r\\n        StakeholderProposal.amount = amount;\\r\\n        StakeholderProposal.title = title;\\r\\n        StakeholderProposal.description = description;\\r\\n        StakeholderProposal.beneficiary = payable(beneficiary);\\r\\n        StakeholderProposal.duration = block.timestamp + MIN_VOTE_PERIOD;\\r\\n\\r\\n        emit ProposalAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,\\r\\n            'Proposal Raised',\\r\\n            beneficiary,\\r\\n            amount\\r\\n        );\\r\\n        return StakeholderProposal;\\r\\n    }\\r\\n\\r\\n    \\r\\n    // voting\\r\\n    function performVote(uint256 proposalId,bool chosen) external\\r\\n    stakeholderOnly(\\\"Only stakeholders can perform voting\\\")\\r\\n    returns(Voted memory)\\r\\n    {\\r\\n        Proposals storage StakeholderProposal = raisedProposals[proposalId];\\r\\n        handleVoting(StakeholderProposal);\\r\\n        if(chosen) StakeholderProposal.upVote++;\\r\\n        else StakeholderProposal.downVotes++;\\r\\n\\r\\n        stakeholderVotes[msg.sender].push(\\r\\n            StakeholderProposal.id\\r\\n        );\\r\\n        votedOn[StakeholderProposal.id].push(\\r\\n            Voted(\\r\\n                msg.sender,\\r\\n                block.timestamp,\\r\\n                chosen\\r\\n            )\\r\\n        );\\r\\n\\r\\n        emit VoteAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,\\r\\n            \\\"PROPOSAL VOTE\\\",\\r\\n            StakeholderProposal.beneficiary,\\r\\n            StakeholderProposal.amount,\\r\\n            StakeholderProposal.upVote,\\r\\n            StakeholderProposal.downVotes,\\r\\n            chosen\\r\\n        );\\r\\n\\r\\n        return Voted(\\r\\n            msg.sender,\\r\\n            block.timestamp,\\r\\n            chosen\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    // handling vote\\r\\n    function handleVoting(Proposals storage proposal) private {\\r\\n        if (proposal.passed || proposal.duration <= block.timestamp) {\\r\\n            proposal.passed = true;\\r\\n            revert(\\\"Time has already passed\\\");\\r\\n        }\\r\\n        uint256[] memory tempVotes = stakeholderVotes[msg.sender];\\r\\n        for (uint256 vote = 0; vote < tempVotes.length; vote++) {\\r\\n            if (proposal.id == tempVotes[vote])\\r\\n                revert(\\\"double voting is not allowed\\\");\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n     // pay beneficiary\\r\\n    function payBeneficiary(uint proposalId) external\\r\\n    stakeholderOnly(\\\"Only stakeholders can make payment\\\") onlyDeployer(\\\"Only deployer can make payment\\\") nonReentrant() returns(uint256){\\r\\n        Proposals storage stakeholderProposal = raisedProposals[proposalId];\\r\\n        require(balance >= stakeholderProposal.amount, \\\"insufficient fund\\\");\\r\\n        if(stakeholderProposal.paid == true) revert(\\\"payment already made\\\");\\r\\n        if(stakeholderProposal.upVote <= stakeholderProposal.downVotes) revert(\\\"insufficient votes\\\");\\r\\n\\r\\n        pay(stakeholderProposal.amount,stakeholderProposal.beneficiary);\\r\\n        stakeholderProposal.paid = true;\\r\\n        stakeholderProposal.executor = msg.sender;\\r\\n        balance -= stakeholderProposal.amount;\\r\\n\\r\\n        emit ProposalAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,\\r\\n            \\\"PAYMENT SUCCESSFULLY MADE!\\\",\\r\\n            stakeholderProposal.beneficiary,\\r\\n            stakeholderProposal.amount\\r\\n        );\\r\\n\\r\\n        return balance;\\r\\n\\r\\n    }\\r\\n\\r\\n    // paymment functionality\\r\\n    function pay(uint256 amount,address to) internal returns(bool){\\r\\n        (bool success,) = payable(to).call{value : amount}(\\\"\\\");\\r\\n        require(success, \\\"payment failed\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n      // contribution functionality\\r\\n    function contribute() payable external returns(uint256){\\r\\n        require(msg.value > 0 ether, \\\"invalid amount\\\");\\r\\n        if (!hasRole(STAKEHOLDER_ROLE, msg.sender)) {\\r\\n            uint256 totalContributions = contributors[msg.sender] + msg.value;\\r\\n\\r\\n            if (totalContributions >= STAKEHOLDER_MIN_CONTRIBUTION) {\\r\\n                stakeholders[msg.sender] = msg.value;\\r\\n                contributors[msg.sender] += msg.value;\\r\\n                _setupRole(STAKEHOLDER_ROLE,msg.sender);\\r\\n                _setupRole(COLLABORATOR_ROLE, msg.sender);\\r\\n            }\\r\\n            else {\\r\\n                contributors[msg.sender] += msg.value;\\r\\n                _setupRole(COLLABORATOR_ROLE,msg.sender);\\r\\n            }\\r\\n        }\\r\\n        else{\\r\\n            stakeholders[msg.sender] += msg.value;\\r\\n            contributors[msg.sender] += msg.value;\\r\\n        }\\r\\n\\r\\n        balance += msg.value;\\r\\n        emit ProposalAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,\\r\\n            \\\"CONTRIBUTION SUCCESSFULLY RECEIVED!\\\",\\r\\n            address(this),\\r\\n            msg.value\\r\\n        );\\r\\n\\r\\n\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n        // get single proposal\\r\\n    function getProposals(uint256 proposalID) external view returns(Proposals memory) {\\r\\n        return raisedProposals[proposalID];\\r\\n    }\\r\\n\\r\\n    // get all proposals\\r\\n    function getAllProposals() external view returns(Proposals[] memory props){\\r\\n        props = new Proposals[](totalProposals);\\r\\n        for (uint i = 0; i < totalProposals; i++) {\\r\\n            props[i] = raisedProposals[i];\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    // get a specific proposal votes\\r\\n    function getProposalVote(uint256 proposalID) external view returns(Voted[] memory){\\r\\n        return votedOn[proposalID];\\r\\n    }\\r\\n\\r\\n    // get stakeholders votes\\r\\n    function getStakeholdersVotes() stakeholderOnly(\\\"Unauthorized\\\") external view returns(uint256[] memory){\\r\\n        return stakeholderVotes[msg.sender];\\r\\n    }\\r\\n\\r\\n    // get stakeholders balances\\r\\n    function getStakeholdersBalances() stakeholderOnly(\\\"unauthorized\\\") external view returns(uint256){\\r\\n        return stakeholders[msg.sender];\\r\\n\\r\\n    }\\r\\n\\r\\n     // get total balances\\r\\n    function getTotalBalance() external view returns(uint256){\\r\\n        return balance;\\r\\n\\r\\n    }\\r\\n\\r\\n    // check if stakeholder\\r\\n    function stakeholderStatus() external view returns(bool){\\r\\n        return stakeholders[msg.sender] > 0;\\r\\n    }\\r\\n\\r\\n    // check if contributor\\r\\n    function isContributor() external view returns(bool){\\r\\n        return contributors[msg.sender] > 0;\\r\\n    }\\r\\n\\r\\n    // check contributors balance\\r\\n    function getContributorsBalance() contributorOnly(\\\"unathorized\\\") external view returns(uint256){\\r\\n        return contributors[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getDeployer()external view returns(address){\\r\\n        return deployer;\\r\\n\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xd57144d4c77660b4249051fc99b41bd028b85ec5b79b934031c27a52d9ff057e\"}},\"version\":1}",
  "bytecode": "0x6101006040526611c37937e0800060805261012c60a0527fd3cd73767648ee32815639d235132b56387142ddb995e593e7f0b0db442a7d4860c0527f193aaa92f8a12e564bc860f8d10b1c1f937927ff6a6e804d359875acec3e5a5a60e05234801561006a57600080fd5b5060018055600480546001600160a01b0319163317905560805160a05160c05160e0516123f361010e6000396000818161045201528181610672015281816109e601528181610ae601528181610bd501528181610f060152818161104b015281816113d101528181611478015281816115870152611651015260008181610e47015281816114a201526114f601526000610ba50152600061141901526123f36000f3fe60806040526004361061012a5760003560e01c80637cdc2eb7116100ab578063cceb68f51161006f578063cceb68f514610347578063d547741f14610369578063d6cc801614610389578063d7bb99ba146103ad578063f43327d2146103b5578063ff4b0db7146103d957600080fd5b80637cdc2eb7146102b057806383047f80146102d057806391d14854146102e5578063a217fddf14610305578063b31f111c1461031a57600080fd5b80632c72fdfc116100f25780632c72fdfc146102045780632f2ff15d14610231578063341edbed1461025357806336568abe14610268578063726305311461028857600080fd5b806301ffc9a71461012f578063119c37c81461016457806312b58349146101925780631c9b2f35146101a7578063248a9ca3146101d4575b600080fd5b34801561013b57600080fd5b5061014f61014a366004611cde565b6103fb565b60405190151581526020015b60405180910390f35b34801561017057600080fd5b5061018461017f366004611d08565b610432565b60405190815260200161015b565b34801561019e57600080fd5b50600354610184565b3480156101b357600080fd5b506101c76101c2366004611d08565b610725565b60405161015b9190611d21565b3480156101e057600080fd5b506101846101ef366004611d08565b60009081526020819052604090206001015490565b34801561021057600080fd5b5061022461021f366004611d08565b6107bf565b60405161015b9190611e9e565b34801561023d57600080fd5b5061025161024c366004611ecd565b610990565b005b34801561025f57600080fd5b506101846109ba565b34801561027457600080fd5b50610251610283366004611ecd565b610a42565b34801561029457600080fd5b506004546040516001600160a01b03909116815260200161015b565b3480156102bc57600080fd5b506102246102cb366004611f42565b610ac0565b3480156102dc57600080fd5b50610184610e1c565b3480156102f157600080fd5b5061014f610300366004611ecd565b610ea2565b34801561031157600080fd5b50610184600081565b34801561032657600080fd5b5061033a610335366004611fcb565b610ecb565b60405161015b9190612000565b34801561035357600080fd5b5061035c61110a565b60405161015b919061202c565b34801561037557600080fd5b50610251610384366004611ecd565b611365565b34801561039557600080fd5b5033600090815260086020526040902054151561014f565b61018461138a565b3480156103c157600080fd5b5033600090815260096020526040902054151561014f565b3480156103e557600080fd5b506103ee611625565b60405161015b919061208e565b60006001600160e01b03198216637965db0b60e01b148061042c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600060405180606001604052806022815260200161236b602291396104777f000000000000000000000000000000000000000000000000000000000000000033610ea2565b819061049f5760405162461bcd60e51b815260040161049691906120c6565b60405180910390fd5b5060408051808201909152601e81527f4f6e6c79206465706c6f7965722063616e206d616b65207061796d656e740000602082015260045481906001600160a01b031633146105015760405162461bcd60e51b815260040161049691906120c6565b5061050a6116f6565b6000848152600560205260409020600181015460035410156105625760405162461bcd60e51b81526020600482015260116024820152701a5b9cdd59999a58da595b9d08199d5b99607a1b6044820152606401610496565b600781015460ff1615156001036105b25760405162461bcd60e51b81526020600482015260146024820152737061796d656e7420616c7265616479206d61646560601b6044820152606401610496565b80600301548160020154116105fe5760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e7420766f74657360701b6044820152606401610496565b6001810154600782015461062191906201000090046001600160a01b031661174f565b5060078101805460ff191660019081179091556009820180546001600160a01b031916331790558101546003805460009061065d9084906120ef565b909155505060078101546001820154604080517f00000000000000000000000000000000000000000000000000000000000000008152606060208201819052601a908201527f5041594d454e54205355434345535346554c4c59204d41444521000000000000608082015290810191909152620100009091046001600160a01b03169033907f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a39060a00160405180910390a360035493505061071e60018055565b5050919050565b606060076000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156107b4576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff16151591830191909152908352909201910161075a565b505050509050919050565b6107c7611c5e565b6005600083815260200190815260200160002060405180610180016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201805461082890612102565b80601f016020809104026020016040519081016040528092919081815260200182805461085490612102565b80156108a15780601f10610876576101008083540402835291602001916108a1565b820191906000526020600020905b81548152906001019060200180831161088457829003601f168201915b505050505081526020016006820180546108ba90612102565b80601f01602080910402602001604051908101604052809291908181526020018280546108e690612102565b80156109335780601f1061090857610100808354040283529160200191610933565b820191906000526020600020905b81548152906001019060200180831161091657829003601f168201915b5050509183525050600782015460ff80821615156020840152610100820416151560408301526001600160a01b03620100009091048116606083015260088301548116608083015260099092015490911660a09091015292915050565b6000828152602081905260409020600101546109ab816117ee565b6109b583836117fb565b505050565b60006040518060400160405280600c81526020016b1d5b985d5d1a1bdc9a5e995960a21b815250610a0b7f000000000000000000000000000000000000000000000000000000000000000033610ea2565b8190610a2a5760405162461bcd60e51b815260040161049691906120c6565b503360009081526009602052604090205491505b5090565b6001600160a01b0381163314610ab25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610496565b610abc828261187f565b5050565b610ac8611c5e565b60405180606001604052806031815260200161238d60319139610b0b7f000000000000000000000000000000000000000000000000000000000000000033610ea2565b8190610b2a5760405162461bcd60e51b815260040161049691906120c6565b506002805460009182610b3c8361213c565b909155506000818152600560208190526040909120828155600181018790559192508101610b6b8a8c836121b9565b5060068101610b7b888a836121b9565b5060078101805462010000600160b01b031916620100006001600160a01b03891602179055610bca7f00000000000000000000000000000000000000000000000000000000000000004261227a565b6004820155604080517f00000000000000000000000000000000000000000000000000000000000000008152606060208201819052600f908201526e141c9bdc1bdcd85b0814985a5cd959608a1b60808201529081018690526001600160a01b0387169033907f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a39060a00160405180910390a380604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582018054610cac90612102565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd890612102565b8015610d255780601f10610cfa57610100808354040283529160200191610d25565b820191906000526020600020905b815481529060010190602001808311610d0857829003601f168201915b50505050508152602001600682018054610d3e90612102565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6a90612102565b8015610db75780601f10610d8c57610100808354040283529160200191610db7565b820191906000526020600020905b815481529060010190602001808311610d9a57829003601f168201915b5050509183525050600782015460ff80821615156020840152610100820416151560408301526201000090046001600160a01b03908116606083015260088301548116608083015260099092015490911660a0909101529a9950505050505050505050565b60006040518060400160405280600b81526020016a1d5b985d1a1bdc9a5e995960aa1b815250610e6c7f000000000000000000000000000000000000000000000000000000000000000033610ea2565b8190610e8b5760405162461bcd60e51b815260040161049691906120c6565b503360009081526008602052604090205491505090565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b604080516060810182526000808252602082018190529181019190915260405180606001604052806024815260200161234760249139610f2b7f000000000000000000000000000000000000000000000000000000000000000033610ea2565b8190610f4a5760405162461bcd60e51b815260040161049691906120c6565b506000848152600560205260409020610f62816118e4565b8315610f8457600281018054906000610f7a8361213c565b9190505550610f9c565b600381018054906000610f968361213c565b91905055505b33600081815260066020908152604080832085548154600180820184559286528486200155855484526007808452828520835160608082018652888252428288019081528d151583880181815285548089018755958b52998990209351600395860290940180546001600160a01b0319166001600160a01b0395861617815591518288015598516002918201805460ff1916911515919091179055938a0154948a0154938a0154928a015486517f0000000000000000000000000000000000000000000000000000000000000000815260c0988101899052600d988101989098526c50524f504f53414c20564f544560981b60e08901529587019390935291850152608084019290925260a08301939093526201000090920490911691907f547e0c985508bf44e88e036a89b60fb24d98f87250028cb1b4f9991ab734e695906101000160405180910390a35050604080516060810182523381524260208201529215159083015250919050565b606060025467ffffffffffffffff81111561112757611127612155565b60405190808252806020026020018201604052801561116057816020015b61114d611c5e565b8152602001906001900390816111455790505b50905060005b600254811015610a3e57600560008281526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820180546111d190612102565b80601f01602080910402602001604051908101604052809291908181526020018280546111fd90612102565b801561124a5780601f1061121f5761010080835404028352916020019161124a565b820191906000526020600020905b81548152906001019060200180831161122d57829003601f168201915b5050505050815260200160068201805461126390612102565b80601f016020809104026020016040519081016040528092919081815260200182805461128f90612102565b80156112dc5780601f106112b1576101008083540402835291602001916112dc565b820191906000526020600020905b8154815290600101906020018083116112bf57829003601f168201915b5050509183525050600782015460ff80821615156020840152610100820416151560408301526001600160a01b03620100009091048116606083015260088301548116608083015260099092015490911660a09091015282518390839081106113475761134761228d565b6020026020010181905250808061135d9061213c565b915050611166565b600082815260208190526040902060010154611380816117ee565b6109b5838361187f565b60008034116113cc5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610496565b6113f67f000000000000000000000000000000000000000000000000000000000000000033610ea2565b611521573360009081526008602052604081205461141590349061227a565b90507f000000000000000000000000000000000000000000000000000000000000000081106114cc5733600090815260096020908152604080832034908190556008909252822080549192909161146d90849061227a565b9091555061149d90507f000000000000000000000000000000000000000000000000000000000000000033611a46565b6114c77f000000000000000000000000000000000000000000000000000000000000000033611a46565b61151b565b33600090815260086020526040812080543492906114eb90849061227a565b9091555061151b90507f000000000000000000000000000000000000000000000000000000000000000033611a46565b5061156a565b336000908152600960205260408120805434929061154090849061227a565b9091555050336000908152600860205260408120805434929061156490849061227a565b90915550505b346003600082825461157c919061227a565b9091555050604080517f000000000000000000000000000000000000000000000000000000000000000081526060602082018190526023908201527f434f4e545249425554494f4e205355434345535346554c4c592052454345495660808201526245442160e81b60a082015234818301529051309133917f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a39181900360c00190a35060035490565b60606040518060400160405280600c81526020016b155b985d5d1a1bdc9a5e995960a21b8152506116767f000000000000000000000000000000000000000000000000000000000000000033610ea2565b81906116955760405162461bcd60e51b815260040161049691906120c6565b5033600090815260066020908152604091829020805483518184028101840190945280845290918301828280156116eb57602002820191906000526020600020905b8154815260200190600101908083116116d7575b505050505091505090565b6002600154036117485760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610496565b6002600155565b600080826001600160a01b03168460405160006040518083038185875af1925050503d806000811461179d576040519150601f19603f3d011682016040523d82523d6000602084013e6117a2565b606091505b50509050806117e45760405162461bcd60e51b815260206004820152600e60248201526d1c185e5b595b9d0819985a5b195960921b6044820152606401610496565b5060019392505050565b6117f88133611a50565b50565b6118058282610ea2565b610abc576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561183b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118898282610ea2565b15610abc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6007810154610100900460ff1680611900575042816004015411155b1561195e5760078101805461ff00191661010017905560405162461bcd60e51b815260206004820152601760248201527f54696d652068617320616c7265616479207061737365640000000000000000006044820152606401610496565b336000908152600660209081526040808320805482518185028101850190935280835291929091908301828280156119b557602002820191906000526020600020905b8154815260200190600101908083116119a1575b5050505050905060005b81518110156109b5578181815181106119da576119da61228d565b6020026020010151836000015403611a345760405162461bcd60e51b815260206004820152601c60248201527f646f75626c6520766f74696e67206973206e6f7420616c6c6f776564000000006044820152606401610496565b80611a3e8161213c565b9150506119bf565b610abc82826117fb565b611a5a8282610ea2565b610abc57611a6781611aa9565b611a72836020611abb565b604051602001611a839291906122a3565b60408051601f198184030181529082905262461bcd60e51b8252610496916004016120c6565b606061042c6001600160a01b03831660145b60606000611aca836002612318565b611ad590600261227a565b67ffffffffffffffff811115611aed57611aed612155565b6040519080825280601f01601f191660200182016040528015611b17576020820181803683370190505b509050600360fc1b81600081518110611b3257611b3261228d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b6157611b6161228d565b60200101906001600160f81b031916908160001a9053506000611b85846002612318565b611b9090600161227a565b90505b6001811115611c08576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611bc457611bc461228d565b1a60f81b828281518110611bda57611bda61228d565b60200101906001600160f81b031916908160001a90535060049490941c93611c018161232f565b9050611b93565b508315611c575760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610496565b9392505050565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001606081526020016060815260200160001515815260200160001515815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b600060208284031215611cf057600080fd5b81356001600160e01b031981168114611c5757600080fd5b600060208284031215611d1a57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015611d8257611d6f83855180516001600160a01b03168252602080820151908301526040908101511515910152565b9284019260609290920191600101611d3d565b50909695505050505050565b60005b83811015611da9578181015183820152602001611d91565b50506000910152565b60008151808452611dca816020860160208601611d8e565b601f01601f19169290920160200192915050565b6000610180825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a08301518160a0860152611e2682860182611db2565b91505060c083015184820360c0860152611e408282611db2565b91505060e0830151611e5660e086018215159052565b5061010083810151151590850152610120808401516001600160a01b039081169186019190915261014080850151821690860152610160938401511692909301919091525090565b602081526000611c576020830184611dde565b80356001600160a01b0381168114611ec857600080fd5b919050565b60008060408385031215611ee057600080fd5b82359150611ef060208401611eb1565b90509250929050565b60008083601f840112611f0b57600080fd5b50813567ffffffffffffffff811115611f2357600080fd5b602083019150836020828501011115611f3b57600080fd5b9250929050565b60008060008060008060808789031215611f5b57600080fd5b863567ffffffffffffffff80821115611f7357600080fd5b611f7f8a838b01611ef9565b90985096506020890135915080821115611f9857600080fd5b50611fa589828a01611ef9565b9095509350611fb8905060408801611eb1565b9150606087013590509295509295509295565b60008060408385031215611fde57600080fd5b8235915060208301358015158114611ff557600080fd5b809150509250929050565b81516001600160a01b03168152602080830151908201526040808301511515908201526060810161042c565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561208157603f1988860301845261206f858351611dde565b94509285019290850190600101612053565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d82578351835292840192918401916001016120aa565b602081526000611c576020830184611db2565b634e487b7160e01b600052601160045260246000fd5b8181038181111561042c5761042c6120d9565b600181811c9082168061211657607f821691505b60208210810361213657634e487b7160e01b600052602260045260246000fd5b50919050565b60006001820161214e5761214e6120d9565b5060010190565b634e487b7160e01b600052604160045260246000fd5b601f8211156109b557600081815260208120601f850160051c810160208610156121925750805b601f850160051c820191505b818110156121b15782815560010161219e565b505050505050565b67ffffffffffffffff8311156121d1576121d1612155565b6121e5836121df8354612102565b8361216b565b6000601f84116001811461221957600085156122015750838201355b600019600387901b1c1916600186901b178355612273565b600083815260209020601f19861690835b8281101561224a578685013582556020948501946001909201910161222a565b50868210156122675760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b8082018082111561042c5761042c6120d9565b634e487b7160e01b600052603260045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516122db816017850160208801611d8e565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161230c816028840160208801611d8e565b01602801949350505050565b808202811582820484141761042c5761042c6120d9565b60008161233e5761233e6120d9565b50600019019056fe4f6e6c79207374616b65686f6c646572732063616e20706572666f726d20766f74696e674f6e6c79207374616b65686f6c646572732063616e206d616b65207061796d656e744f6e6c79207374616b65686f6c646572732061726520616c6c6f77656420746f206372656174652050726f706f73616c73a26469706673582212207a4ea36892431c4c16d9579c1b6307da50b8ddd9732521b1719269a196f215b764736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 399,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1721,
        "contract": "contracts/DAO.sol:DAO",
        "label": "totalProposals",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1723,
        "contract": "contracts/DAO.sol:DAO",
        "label": "balance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1725,
        "contract": "contracts/DAO.sol:DAO",
        "label": "deployer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1746,
        "contract": "contracts/DAO.sol:DAO",
        "label": "raisedProposals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Proposals)1790_storage)"
      },
      {
        "astId": 1751,
        "contract": "contracts/DAO.sol:DAO",
        "label": "stakeholderVotes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1757,
        "contract": "contracts/DAO.sol:DAO",
        "label": "votedOn",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_struct(Voted)1797_storage)dyn_storage)"
      },
      {
        "astId": 1761,
        "contract": "contracts/DAO.sol:DAO",
        "label": "contributors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1765,
        "contract": "contracts/DAO.sol:DAO",
        "label": "stakeholders",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Voted)1797_storage)dyn_storage": {
        "base": "t_struct(Voted)1797_storage",
        "encoding": "dynamic_array",
        "label": "struct DAO.Voted[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(Voted)1797_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAO.Voted[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Voted)1797_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Proposals)1790_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAO.Proposals)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposals)1790_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposals)1790_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Proposals",
        "members": [
          {
            "astId": 1767,
            "contract": "contracts/DAO.sol:DAO",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1769,
            "contract": "contracts/DAO.sol:DAO",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1771,
            "contract": "contracts/DAO.sol:DAO",
            "label": "upVote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1773,
            "contract": "contracts/DAO.sol:DAO",
            "label": "downVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1775,
            "contract": "contracts/DAO.sol:DAO",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1777,
            "contract": "contracts/DAO.sol:DAO",
            "label": "title",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1779,
            "contract": "contracts/DAO.sol:DAO",
            "label": "description",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1781,
            "contract": "contracts/DAO.sol:DAO",
            "label": "paid",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 1783,
            "contract": "contracts/DAO.sol:DAO",
            "label": "passed",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 1785,
            "contract": "contracts/DAO.sol:DAO",
            "label": "beneficiary",
            "offset": 2,
            "slot": "7",
            "type": "t_address_payable"
          },
          {
            "astId": 1787,
            "contract": "contracts/DAO.sol:DAO",
            "label": "propoper",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 1789,
            "contract": "contracts/DAO.sol:DAO",
            "label": "executor",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/DAO.sol:DAO",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/DAO.sol:DAO",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voted)1797_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Voted",
        "members": [
          {
            "astId": 1792,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1794,
            "contract": "contracts/DAO.sol:DAO",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1796,
            "contract": "contracts/DAO.sol:DAO",
            "label": "chosen",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}